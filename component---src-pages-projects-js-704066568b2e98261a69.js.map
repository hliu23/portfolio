{"version":3,"file":"component---src-pages-projects-js-704066568b2e98261a69.js","mappings":"mKAoEA,EA9De,SAAC,GAA6B,IAA3BA,EAA0B,EAA1BA,UAAWC,EAAe,EAAfA,SAErBC,GAAOC,EAAAA,EAAAA,gBAAe,cAatBC,EAAQ,CAAE,MAAS,WAEzB,OACE,uBAAKC,UAAU,mBACb,uBAAKA,UAAU,aACb,uBAAKA,UAAU,OACb,uBAAKA,UAAU,aAGf,uBAAKA,UAAU,YACb,2BACE,6BAAQL,EAAR,MAAsBE,EAAKI,KAAKC,aAAaC,OAC7C,2BACE,sBAAIH,UAAU,OACZ,sBAAIA,UAAU,YACZ,gBAAC,EAAAI,KAAD,CAAMC,GAAG,IAAIL,UAAU,WAAWD,MAAOA,GAAzC,SAEF,sBAAIC,UAAU,YACZ,gBAAC,EAAAI,KAAD,CAAMC,GAAG,YAAYL,UAAU,WAAWD,MAAOA,GAAjD,aAEF,sBAAIC,UAAU,YACZ,gBAAC,EAAAI,KAAD,CAAMC,GAAG,YAAYL,UAAU,WAAWD,MAAOA,GAAjD,eAIN,4BACE,sBAAIC,UC7CD,+BD6C2BL,GAC9B,uBAAKK,UC/CA,iCD+C4BJ,MAIvC,uBAAKI,UAAU,kB,mGEdzB,EAjCgB,SAACM,GAEf,IAAIC,EAAU,GAKd,OAJAD,EAAMC,QAAQC,SAAQ,SAACC,EAAQC,GAC7BH,GAAWE,EACPC,EAAQJ,EAAMC,QAAQI,OAAS,IAAGJ,GAAW,SAGjD,uBAAKP,UAAU,YACb,uBAAKA,UAAU,QACb,qBAAGA,UAAU,2BACVM,EAAMM,QAET,uBAAKZ,UAAU,aACb,sBAAIA,UAAU,0BAA0BM,EAAMO,MAC9C,sBAAIb,UAAU,6BAA6BO,GAE3C,gBAAC,EAAAO,EAAD,CACEC,MAAOT,EAAMU,UACbC,IAAI,OACJjB,UAAU,eACVkB,UAAU,YAEZ,qBAAGlB,UAAU,aAAaM,EAAMa,cAElC,qBAAGnB,UAAU,yBACX,qBAAGoB,KAAMd,EAAMe,WAAYrB,UAAU,mBAArC,oB,miECrBV,IAyCA,EAzCqB,SAAC,GAGpB,IAHkC,IAGlC,EAHsBH,EAAW,EAAXA,KAClBmB,EAAY,GAEhB,IADcnB,EAAKyB,QAAQC,SAC3B,aAAwB,CAAC,IAAhBC,EAAe,QACtBR,EAAUQ,EAAKX,OAAQY,EAAAA,EAAAA,GAASD,EAAKE,mBAAmB,IAG1D,IAAMC,EAAOC,OAAOD,KAAKE,GAQzB,OAPAF,EAAKnB,SAAQ,SAACsB,GACZD,EAASC,GAAKd,UAAYA,EAAUc,MAOpC,gBAAC,IAAD,CAAQnC,UAAU,YAEhB,uBAAKK,UAAU,mBACb,uBAAKA,UAAU,yBACZ2B,EAAKI,KAAI,SAACD,GACT,OACA,gBAAC,EAAD,CACEA,IAAKA,EAELd,UAAWa,EAASC,GAAKd,UACzBH,KAAMgB,EAASC,GAAKjB,KACpBN,QAASsB,EAASC,GAAKvB,QACvBY,YAAaU,EAASC,GAAKX,YAC3BE,WAAYQ,EAASC,GAAKT,WAC1BT,OAAQiB,EAASC,GAAKlB","sources":["webpack://portfolio/./src/components/layout.js","webpack://portfolio/./src/styles/layout.module.css","webpack://portfolio/./src/components/project.js","webpack://portfolio/./src/pages/projects.js"],"sourcesContent":["import * as React from \"react\";\r\nimport { Link, useStaticQuery, graphql } from \"gatsby\";\r\n\r\nimport \"../styles/modified/custom.compressed.css\";\r\nimport * as custom from \"../styles/layout.module.css\";\r\n\r\nconst Layout = ({ pageTitle, children }) => {\r\n\r\n  const data = useStaticQuery(graphql`\r\n    query {\r\n      site {\r\n        siteMetadata {\r\n          title\r\n        }\r\n      }\r\n      siteBuildMetadata {\r\n        buildTime\r\n      }\r\n    }  \r\n  `)\r\n\r\n  const style = { \"color\": \"#171738\" };\r\n\r\n  return (\r\n    <div className=\"container-fluid\">\r\n      <div className=\"container\">\r\n        <div className=\"row\">\r\n          <div className=\"col-md-2\">\r\n\r\n          </div>\r\n          <div className=\"col-md-8\">\r\n            <div>\r\n              <title>{pageTitle} | {data.site.siteMetadata.title}</title>\r\n              <nav>\r\n                <ul className=\"nav\">\r\n                  <li className=\"nav-item\">\r\n                    <Link to=\"/\" className=\"nav-link\" style={style}>Home</Link>\r\n                  </li>\r\n                  <li className=\"nav-item\">\r\n                    <Link to=\"/projects\" className=\"nav-link\" style={style}>Projects</Link>\r\n                  </li>\r\n                  <li className=\"nav-item\">\r\n                    <Link to=\"/progress\" className=\"nav-link\" style={style}>Progress</Link>\r\n                  </li>\r\n                </ul>\r\n              </nav>\r\n              <main>\r\n                <h1 className={custom.title}>{pageTitle}</h1>\r\n                <div className={custom.content}>{children}</div>\r\n              </main>\r\n            </div>\r\n          </div>\r\n          <div className=\"col-md-2\">\r\n            {/* announcement */}\r\n            {/* <div class=\"alert alert-primary\" role=\"alert\">\r\n              A simple primary alertâ€”check it out!\r\n            </div> */}\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n\r\n\r\n    </div>\r\n\r\n  );\r\n}\r\n\r\nexport default Layout;","// extracted by mini-css-extract-plugin\nexport var content = \"layout-module--content--ayx5z\";\nexport var title = \"layout-module--title--U7GzC\";","import * as React from \"react\";\r\nimport { GatsbyImage } from \"gatsby-plugin-image\";\r\n\r\n\r\n\r\nconst Project = (props) => {\r\n  // imageData, name, authors, description, updatedDate, githubLink\r\n  let authors = \"\";\r\n  props.authors.forEach((author, index) => {\r\n    authors += author;\r\n    if (index < props.authors.length - 1) authors += \", \";\r\n  });\r\n  return (\r\n    <div className=\"col-md-6\">\r\n      <div className=\"card\">\r\n        <p className=\"card-header text-center\">\r\n          {props.status}\r\n        </p>\r\n        <div className=\"card-body\">\r\n          <h5 className=\"card-title text-center\">{props.name}</h5>\r\n          <h6 className=\"card-subtitle text-center\">{authors}\r\n          </h6>\r\n          <GatsbyImage\r\n            image={props.imageData}\r\n            alt=\"icon\"\r\n            className=\"card-img-top\"\r\n            objectFit=\"contain\"\r\n          ></GatsbyImage>\r\n          <p className=\"card-text\">{props.description}</p>\r\n        </div>\r\n        <p className=\"card-link text-center\">\r\n          <a href={props.githubLink} className=\"btn btn-primary\">View Project</a>\r\n        </p>\r\n      </div>\r\n    </div>\r\n  )\r\n};\r\n\r\nexport default Project;","import * as React from \"react\";\r\nimport { graphql } from \"gatsby\";\r\nimport { getImage } from \"gatsby-plugin-image\";\r\n\r\nimport Layout from \"../components/layout\";\r\nimport Project from \"../components/project\";\r\n\r\nimport JSONData from \"../content/projects/projects.json\";\r\n\r\n\r\nconst projectsPage = ({ data }) => {\r\n  let imageData = {};\r\n  const nodes = data.allFile.nodes;\r\n  for (let node of nodes) {\r\n    imageData[node.name] = getImage(node.childrenImageSharp[0]);\r\n  }\r\n\r\n  const keys = Object.keys(JSONData);\r\n  keys.forEach((key) => {\r\n    JSONData[key].imageData = imageData[key];\r\n  })\r\n\r\n  // name from json has to match file name\r\n\r\n  // check relative path?\r\n  return (\r\n    <Layout pageTitle=\"Projects\">\r\n\r\n      <div className=\"container-fluid\">\r\n        <div className=\"row row-cols-md-2 g-4\">\r\n          {keys.map((key) => {\r\n            return (\r\n            <Project\r\n              key={key}\r\n              \r\n              imageData={JSONData[key].imageData}\r\n              name={JSONData[key].name}\r\n              authors={JSONData[key].authors}\r\n              description={JSONData[key].description}\r\n              githubLink={JSONData[key].githubLink}\r\n              status={JSONData[key].status}\r\n            >\r\n            </Project>\r\n            );\r\n          })}\r\n        </div>\r\n      </div>\r\n    </Layout>\r\n  );\r\n}\r\n// (transformOptions: {fit: CONTAIN})\r\nexport default projectsPage;\r\n\r\nexport const query = graphql`\r\nquery {\r\n  allFile(\r\n    filter: {sourceInstanceName: {eq: \"projects\"}, relativeDirectory: {eq: \"images\"}}\r\n    sort: {fields: name, order: ASC}\r\n  ) {\r\n    nodes {\r\n      name\r\n      childrenImageSharp {\r\n        gatsbyImageData\r\n      }\r\n      relativePath\r\n    }\r\n  }\r\n}\r\n`\r\n\r\n// project.js, project.json, projects.js\r\n\r\n// github api?"],"names":["pageTitle","children","data","useStaticQuery","style","className","site","siteMetadata","title","Link","to","props","authors","forEach","author","index","length","status","name","G","image","imageData","alt","objectFit","description","href","githubLink","allFile","nodes","node","getImage","childrenImageSharp","keys","Object","JSONData","key","map"],"sourceRoot":""}